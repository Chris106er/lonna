import { Atom, EventStream, EventStreamSeed, Property, PropertySeed } from "./abstractions";
import * as L from "./lens";
export declare function view<A, K extends keyof A>(a: Atom<A>, key: K): K extends number ? Atom<A[K] | undefined> : Atom<A[K]>;
export declare function view<A, B>(a: Atom<A>, lens: L.Lens<A, B>): Atom<B>;
export declare function view<A, K extends keyof A>(a: Property<A>, key: K): K extends number ? Atom<A[K] | undefined> : Property<A[K]>;
export declare function view<A, B>(a: Property<A>, lens: L.Lens<A, B>): Property<B>;
export declare function view<A, K extends keyof A>(a: EventStream<A>, key: K): K extends number ? Atom<A[K] | undefined> : EventStream<A[K]>;
export declare function view<A, B>(a: EventStream<A>, lens: L.Lens<A, B>): EventStream<B>;
export declare function view<A, K extends keyof A>(a: PropertySeed<A>, key: K): K extends number ? Atom<A[K] | undefined> : PropertySeed<A[K]>;
export declare function view<A, B>(a: PropertySeed<A>, lens: L.Lens<A, B>): PropertySeed<B>;
export declare function view<A, K extends keyof A>(a: EventStreamSeed<A>, key: K): K extends number ? Atom<A[K] | undefined> : EventStreamSeed<A[K]>;
export declare function view<A, B>(a: EventStreamSeed<A>, lens: L.Lens<A, B>): EventStreamSeed<B>;
